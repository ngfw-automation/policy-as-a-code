"""
Functions for creating and managing custom URL categories in PAN-OS.

This module provides functionality to:

- Create dynamic custom URL categories based on business requirements
- Generate risk-based category matching profiles (medium and high risk)
- Create static URL categories from CSV configuration files
- Support both URL list and category match type categories
- Import URL lists from remote HTTP/HTTPS sources
- Handle category descriptions and metadata
- Deploy custom URL categories to PAN-OS devices using multi-config API calls
"""

import panos.objects
from panos.objects import CustomUrlCategory
import settings
import requests
from lib.auxiliary_functions import parse_metadata_from_csv, execute_multi_config_api_call
from rich import print
from    pan.xapi            import PanXapiError
import sys


def create_custom_url_categories(custom_url_category_container, panos_device, url_categories):
    panos_device.add(custom_url_category_container)
    print("Staging custom URL categories (dynamic, based on requirements)...")
    # =========================================
    # Autogenerated URL categories (risk-based)
    # =========================================

    action_id = 1
    multi_config_xml = '<multi-config>'

    for category in url_categories:
        if (category["Action"].lower() == settings.URL_ACTION_MANAGE) and ('UCL-' not in category["Category"]) and ('UCM-' not in category["Category"]):

            url_category_object = CustomUrlCategory(name='UCM-' + category["Abbreviation"].lower() + '_med-risk',
                                                    url_value=[category["Category"].lower(), 'medium-risk'],
                                                    type='Category Match')
            custom_url_category_container.add(url_category_object)
            if settings.VERBOSE_OUTPUT:  print(f'\t{url_category_object.name}')
            custom_url_category_container.add(url_category_object)
            multi_config_xml += f'<edit id="{action_id}" xpath="{url_category_object.xpath()}">{url_category_object.element_str().decode()}</edit>'
            action_id += 1

            url_category_object = CustomUrlCategory(name='UCM-' + category["Abbreviation"].lower() + '_high-risk',
                                                    url_value=[category["Category"].lower(), 'high-risk'],
                                                    type='Category Match')
            custom_url_category_container.add(url_category_object)
            if settings.VERBOSE_OUTPUT:  print(f'\t{url_category_object.name}')
            custom_url_category_container.add(url_category_object)
            multi_config_xml += f'<edit id="{action_id}" xpath="{url_category_object.xpath()}">{url_category_object.element_str().decode()}</edit>'
            action_id += 1

    multi_config_xml += '</multi-config>'
    execute_multi_config_api_call(panos_device, multi_config_xml, 'Creating the staged URL categories...', 0)


    # ====================================
    # Static URL categories defined in CSV
    # ====================================
    custom_url_categories       = parse_metadata_from_csv('Custom URL Categories', settings.CUSTOM_URL_CATEGORIES_FILENAME)

    print("Staging custom URL categories (defined in local CSV or remote text files)...")

    # Build a deduplicated list of custom categories (their names and types)
    categories = list()
    for entry in custom_url_categories:
        if entry['Name'].strip() not in {cat['category_name'] for cat in categories}:
            categories.append({'category_name': entry['Name'].strip(), 'category_type': entry['Type'].strip().lower()})

    # Create each category (the last non-empty string for description takes precedence)
    action_id = 1
    multi_config_xml = '<multi-config>'
    for category in categories:

        # print category name if verbose output is enabled
        if settings.VERBOSE_OUTPUT: print(f"\t{category['category_name']:<33}", end="")

        # look up description (the last non-empty string in the description field) of the current category
        description = ''
        for entry in custom_url_categories:
            if category["category_name"] == entry['Name'] and entry['Description'] != '':
                description = entry['Description']

        # build a list of urls for the category
        # the URLs can be specified as a list in the CSV file itself
        # or be an HTTP(S) link to a text file with URLs
        urls = list()
        url_or_csv = ""
        for entry in custom_url_categories:

            if category["category_name"] == entry['Name'] and entry['Sites'] != '' and not entry['Sites'].lower().strip().startswith("https://"):
                url_or_csv = "CSV"
                urls.append(entry['Sites'].lower().strip())

            elif category["category_name"] == entry['Name'] and entry['Sites'] != '' and entry['Sites'].lower().strip().startswith("https://"):
                url_or_csv = "URL"
                response = requests.get(url=entry['Sites'], verify=settings.CERTIFICATE_BUNDLE_FILENAME)
                response.raise_for_status()
                content = response.text

                url_list = content.splitlines()

                normalized_urls = list()
                for each_url in url_list:
                    if each_url:  # ensure we're not adding empty lines
                        normalized_urls.append(each_url.lower().strip())

                urls = normalized_urls

        print(f"Source: {url_or_csv}  Number of entries: {len(urls)}")
        # create the category with just established description and list of URLs or categories
        if category['category_type'] == 'list' or category['category_type'] == 'url list':
            url_category_object = CustomUrlCategory(name=category['category_name'],
                                                    type='URL List',
                                                    url_value=urls,
                                                    description=description)
            custom_url_category_container.add(url_category_object)
            multi_config_xml += f'<edit id="{action_id}" xpath="{url_category_object.xpath()}">{url_category_object.element_str().decode()}</edit>'
            action_id += 1
        elif category['category_type'] == 'match' or category['category_type'] == 'category match':
            url_category_object = CustomUrlCategory(name=category['category_name'],
                                                    type='Category Match',
                                                    url_value=urls,
                                                    description=description)
            custom_url_category_container.add(url_category_object)
            multi_config_xml += f'<edit id="{action_id}" xpath="{url_category_object.xpath()}">{url_category_object.element_str().decode()}</edit>'
            action_id += 1
        else:
            print(f"!!! Unknown category type '{category['category_type']}' specified for the category '{category['category_name']}' !!!")
            sys.exit(1)

    multi_config_xml += '</multi-config>'
    execute_multi_config_api_call(panos_device, multi_config_xml, 'Creating the staged URL categories...', 0)
