"""
Functions for creating and managing service objects and groups in PAN-OS.

This module provides functionality to:

- Create service objects for TCP and UDP protocols with specific port definitions
- Generate service object names automatically based on protocol and port information
- Create service groups that combine multiple service objects
- Parse service definitions from CSV configuration files
- Apply tags to service objects for better organization
- Deploy service objects and groups to PAN-OS devices using multi-config API calls
"""

import settings
from lib.auxiliary_functions   import parse_metadata_from_csv, execute_multi_config_api_call
from panos.objects import ServiceObject, ServiceGroup
from rich import print


def create_service_objects(service_container, panos_device):
    """
    Creates and stages service objects and service object groups based on parsed metadata. The function parses CSV data
    to generate service objects and their associated tags, then stages these objects for configuration on the target
    device. If service groups are specified, the function also stages those service groups by aggregating relevant
    service objects.

    This function handles optional auto-generation of service object names when not explicitly provided in the data and
    parses multi-value fields (e.g., tags, groups) into lists as required. All generated configurations are committed in
    bulk via PanOS multi-config API calls.

    Args:
        service_container: Device Group or VSYS object that will hold the newly created service objects and groups.
        panos_device: Firewall or Panorama device object to which the change will be deployed.

    """
    panos_device.add(service_container)

    service_objects = parse_metadata_from_csv("Service Objects", settings.SERVICE_OBJECTS_FILENAME)

    # Creation of Service Objects
    if len(service_objects) != 0:
        print("Staging service objects...")
        action_id = 1
        multi_config_xml = '<multi-config>'

        for service in service_objects:

            if service['Protocol'].lower() == 'tcp' or service['Protocol'].lower() == 'udp':
                # If the name field is omitted then it's autogenerated in accordance with naming convention
                if service['Name'] == '' and ',' not in service['Destination Port']:
                    service_name = settings.PREFIX_FOR_SERVICE_OBJECTS + service['Protocol'] + '-' + service['Destination Port']
                # otherwise we just use the name specified in the field
                else:
                    service_name = service['Name']

                # if Tags field is not empty then we convert this field into a list (assuming it's a comma-separated one)
                if service['Tags'] != '':
                    service_tags = service['Tags'].split(',')
                    service_tags = [x.strip(' ') for x in service_tags]
                else:
                    service_tags = None

                service_object = ServiceObject(name=service_name,
                                               protocol=service['Protocol'],
                                               destination_port=service['Destination Port'],
                                               description=service['Description'],
                                               tag=service_tags)
                if settings.VERBOSE_OUTPUT: print(f'\t{service_object.name}')
                service_container.add(service_object)
                multi_config_xml += f'<edit id="{action_id}" xpath="{service_object.xpath()}">{service_object.element_str().decode()}</edit>'
                action_id += 1

        # Creating the service objects (if at least one of them is found)
        multi_config_xml += '</multi-config>'
        execute_multi_config_api_call(panos_device, multi_config_xml, 'Creating the staged service objects...', 0)


        # Creation of Service Object Groups

        # First, we build a deduped list of all service groups mentioned in the file
        all_service_groups = []
        for service in service_objects:

            if service['Service Group Name'] != '' and (service['Protocol'].lower() == 'tcp' or service['Protocol'].lower() == 'udp'):
                service_groups = service['Service Group Name'].split(',')
                service_groups = [x.strip(' ') for x in service_groups]
                all_service_groups = all_service_groups + service_groups

        all_service_groups = list(dict.fromkeys(all_service_groups))

        # Second, we take each service group and search for all service (group) objects that are members of this group
        if len(all_service_groups) != 0:

            print(f'Staging {len(all_service_groups)} service group object(s)...')
            action_id = 1
            multi_config_xml = '<multi-config>'

            for service_group in all_service_groups:
                service_group_members = []
                for service in service_objects:
                    if service_group in service['Service Group Name'] and service['Name'] != '' and (service['Protocol'].lower() == 'tcp' or service['Protocol'].lower() == 'udp'):
                        # object name is explicitly specified, so we just use it
                        service_group_members.append(service['Name'])
                    elif service_group in service['Service Group Name'] and service['Name'] == '' and (service['Protocol'].lower() == 'tcp' or service['Protocol'].lower() == 'udp'):
                        # object name is not specified, so we autogenerate it in accordance with naming conventions
                        service_name = settings.PREFIX_FOR_SERVICE_OBJECTS + service['Protocol'] + '-' + service['Destination Port']
                        service_group_members.append(service_name)

                service_group_object = ServiceGroup(name=service_group, value=service_group_members)
                if settings.VERBOSE_OUTPUT: print(f'\t{service_group_object.name}')
                service_container.add(service_group_object)
                multi_config_xml += f'<edit id="{action_id}" xpath="{service_group_object.xpath()}">{service_group_object.element_str().decode()}</edit>'
                action_id += 1

            # Creating the service objects (if at least one of them is found)
            multi_config_xml += '</multi-config>'
            execute_multi_config_api_call(panos_device, multi_config_xml, 'Creating the staged service groups...', 0)
