<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>{{ title }}</title>
  <style>{{ css }}</style>
  {% block head_extra %}{% endblock %}
</head>
<body>
  <div id="content">
    <!-- ───── Company header ───── -->
    <div class="banner">
      <span class="brand">{{ firm_name }}</span>
      <span class="infosec">{{ infosec_label }}</span>
    </div>

    <!-- ───── Main response area ───── -->
    <div class="response">
      <h1 id="headingText">{{ default_heading }}</h1>
      <p id="warningText">{{ default_message }}</p>
      {% block extra_body %}{% endblock %}
    </div>

    <!-- ───── Summary panel (override block to suppress) ───── -->
    {% block summary %}
    <div class="summary">
      <p>
        <b>User:</b> <span id="summary-user"></span><br>
        <b>Category:</b> <span id="summary-category"></span><br>
        <b>Destination:</b> <span id="summary-dest"></span><br>
        <b>Application:</b> <span id="summary-app"></span>
      </p>
    </div>
    {% endblock %}
  </div>

  <!-- ───── Footer: status + help message (one block, no gap) ───── -->
  <footer>
    <p class="footer-text" id="footerText"></p>
  </footer>

  <script>
  /* ---------- helper & core tokens ---------- */
  const clean = v => v.startsWith("<") && v.endsWith("/>") ? "" : v;

  const url      = clean("<url/>");
  let   category = clean("<category/>");
  const rule     = clean("<rulename/>");
  const usr      = clean(String.raw`<user/>`);
  const app      = clean(String.raw`<appname/>`);
  const fname    = clean("<fname/>");
  const timenow  = new Date();

  /* ---------- derive category when missing ---------- */
  if (!category) {
    if (rule.startsWith('not-authorized-for-')) {
      category = rule.slice(18).replace(/-/g, ' ');
    } else if (rule.startsWith('non-sanctioned-')) {
      category = rule.slice(15).replace(/-/g, ' ');
    } else if (rule.startsWith('blocked-category-')) {
      const risk = rule.slice(17).replace(/-apps$/, '');
      category = 'unknown-' + risk;
    } else {
      category = 'unknown';
    }
  }

  /* ---------- constants from YAML ---------- */
  const servicedesk_base    = "{{ servicedesk_base }}";
  const servicedesk_form_id = {{ servicedesk_form_id | default({}) | tojson | safe }};
  const redirect_base       = "{{ redirect_base }}";

  /* ---------- templating helper ---------- */
  function fill(t) {
    return t.replaceAll('{category}', category)
            .replaceAll('{user}',     usr)
            .replaceAll('{appname}',  app)
            .replaceAll('{url}',      url)
            .replaceAll('{filename}', fname);
  }

  /* ---------- populate summary panel ---------- */
  document.getElementById('summary-user').textContent     = usr || '—';
  document.getElementById('summary-category').textContent = category || '—';
  document.getElementById('summary-dest').textContent     = url || '—';
  document.getElementById('summary-app').textContent      = app || '—';

  /* ---------- footer text (status + help) ---------- */
  document.getElementById('footerText').innerHTML =
    `{{ timestamp_message_suffix | replace("`","\\`") }}<br>`
    + `This page was generated by {{ firm_name }}’s security system at `
    + timenow.toLocaleString();

  /* ---------- rule chain ---------- */
  {% if conditional_blocks|length %}
    {% for b in conditional_blocks %}
    {%- if loop.first -%}
if (
    {%- else -%}
} else if (
    {%- endif -%}
      {%- if b.operator == "includes" -%}
        {{ b.match }}.includes(`{{ b.value }}`)
      {%- elif b.operator == "starts_with" -%}
        {{ b.match }}.startsWith(`{{ b.value }}`)
      {%- elif b.operator == "regex" -%}
        new RegExp({{ b.value | tojson }}).test({{ b.match }})
      {%- elif b.operator == "raw" -%}
        {{ b.value | safe }}
      {%- endif -%}
) {
      document.getElementById("headingText").textContent = "{{ b.heading }}";
      document.getElementById("warningText").innerHTML   = fill(`{{ b.message | replace("`","\\`") }}`);
    {% endfor %}
} else {
      document.getElementById("headingText").textContent = "{{ fallback.heading }}";
      document.getElementById("warningText").innerHTML   = fill(`{{ fallback.message | replace("`","\\`") }}`);
}
  {% else %}
    document.getElementById("headingText").textContent = "{{ fallback.heading | default(default_heading) }}";
    document.getElementById("warningText").innerHTML   = fill(`{{ fallback.message | replace("`","\\`") }}`);
  {% endif %}
  </script>
</body>
</html>
